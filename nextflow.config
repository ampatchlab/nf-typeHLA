manifest {

  author = 'Stephen Kazakoff'
  homePage = 'https://github.com/ampatchlab/nf-typeHLA'
  description = 'HLA typing Nextflow pipeline'
  version = '0.1'
}

params {

  csv = null

  genome = 'hs38DH'

  genomes {
    'hs38DH' {
      idxbase = 'ftp://ftp.1000genomes.ebi.ac.uk/vol1/ftp/technical/reference/GRCh38_reference_genome/GRCh38_full_analysis_set_plus_decoy_hla.fa'
      hla_resource = "${baseDir}/resource-human-HLA"
    }
  }

  adapters = null

  adapter_files {
    'TruSeq' {
      r1_adapters = "${baseDir}/resource-adapters/TruSeq-1.fa"
      r2_adapters = "${baseDir}/resource-adapters/TruSeq-2.fa"
    }
    'NexteraTransposase' {
      r1_adapters = "${baseDir}/resource-adapters/NexteraTransposase-1.fa"
      r2_adapters = "${baseDir}/resource-adapters/NexteraTransposase-2.fa"
    }
    'BGISeq' {
      r1_adapters = "${baseDir}/resource-adapters/BGISeq-1.fa"
      r2_adapters = "${baseDir}/resource-adapters/BGISeq-2.fa"
    }
  }

  // MultiQC params
  multiqc_config = "${baseDir}/multiqc/multiqc_config.yaml"

  // output params
  publish_dir = './results'
  publish_mode = 'copy'

  // publish params
  publish_hla_typing = true
  publish_mark_duplicates = true
  publish_multiqc = true

  // report params
  execution_report = './reports/execution_report.html'
  trace_report = './reports/trace_report.txt'
  timeline_report = './reports/timeline_report.html'
  flowchart = './reports/flowchart.png'

  // AWS Batch options
  aws_queue = false
  aws_region = false

  // standard options
  help = false
  version = false
}

process {

  shell = [ '/bin/bash', '-euo', 'pipefail' ]
}

report {

  enabled = true
  file = params.execution_report
}

trace {

  enabled = true
  file = params.trace_report
}

timeline {

  enabled = true
  file = params.timeline_report
}

dag {

  enabled = true
  file = params.flowchart
}

includeConfig 'conf/base.config'

profiles {

  'awsbatch' {
    includeConfig 'conf/containers.config'
    includeConfig 'conf/awsbatch.config'
  }

  'conda' {
    includeConfig 'conf/conda.config'
  }

  'docker' {
    includeConfig 'conf/containers.config'
    docker.enabled = true
  }

  'singularity' {
    includeConfig 'conf/containers.config'
    singularity.enabled = true
  }

  // institute configs

  'qimrb' {
    includeConfig 'conf/qimrb.config'
  }

  // test configs

  'NIST_NA12878-SE' {
    includeConfig 'tests/NIST_NA12878-SE.config'
  }

  'NIST_NA12878-PE' {
    includeConfig 'tests/NIST_NA12878-PE.config'
  }
}

def max_cpus(cpus) {
    return cpus > params.max_cpus ? params.max_cpus : cpus
}

def max_memory(memory) {
    return memory > params.max_memory ? params.max_memory : memory
}

def max_time(time) {
    return time > params.max_time ? params.max_time : time
}
